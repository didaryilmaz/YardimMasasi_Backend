-- User log fonksiyonu
CREATE OR REPLACE FUNCTION log_user_changes()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        INSERT INTO user_log(operation_type, user_id, name, surname, email, password, role)
        VALUES ('INSERT', NEW."UserId", NEW."Name", NEW."Surname", NEW."Email", NEW."Password", NEW."Role");

    ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO user_log(operation_type, user_id, name, surname, email, password, role)
        VALUES ('UPDATE', NEW."UserId", NEW."Name", NEW."Surname", NEW."Email", NEW."Password", NEW."Role");

    ELSIF (TG_OP = 'DELETE') THEN
        INSERT INTO user_log(operation_type, user_id, name, surname, email, password, role)
        VALUES ('DELETE', OLD."UserId", OLD."Name", OLD."Surname", OLD."Email", OLD."Password", OLD."Role");
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;



-- Ticket log fonksiyonu
CREATE OR REPLACE FUNCTION log_ticket_changes()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        INSERT INTO ticket_log(operation_type, ticket_id, title, description, status, priority_id, category_id, user_id, support_id, created_date, updated_date)
        VALUES ('INSERT', NEW."TicketId", NEW."Title", NEW."Description", NEW."Status", NEW."PriorityId", NEW."CategoryId", NEW."UserId", NEW."SupportId", NEW."CreatedDate", NEW."UpdatedDate");

    ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO ticket_log(operation_type, ticket_id, title, description, status, priority_id, category_id, user_id, support_id, created_date, updated_date)
        VALUES ('UPDATE', NEW."TicketId", NEW."Title", NEW."Description", NEW."Status", NEW."PriorityId", NEW."CategoryId", NEW."UserId", NEW."SupportId", NEW."CreatedDate", NEW."UpdatedDate");

    ELSIF (TG_OP = 'DELETE') THEN
        INSERT INTO ticket_log(operation_type, ticket_id, title, description, status, priority_id, category_id, user_id, support_id, created_date, updated_date)
        VALUES ('DELETE', OLD."TicketId", OLD."Title", OLD."Description", OLD."Status", OLD."PriorityId", OLD."CategoryId", OLD."UserId", OLD."SupportId", OLD."CreatedDate", OLD."UpdatedDate");
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;




-- TicketResponse log fonksiyonu
CREATE OR REPLACE FUNCTION log_ticket_response_changes()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        INSERT INTO ticket_response_log(operation_type, ticket_response_id, response, datetime, ticket_id, user_id)
        VALUES ('INSERT', NEW."TicketResponseId", NEW."Response", NEW."DateTime", NEW."TicketId", NEW."UserId");
    ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO ticket_response_log(operation_type, ticket_response_id, response, datetime, ticket_id, user_id)
        VALUES ('UPDATE', NEW."TicketResponseId", NEW."Response", NEW."DateTime", NEW."TicketId", NEW."UserId");
    ELSIF (TG_OP = 'DELETE') THEN
        INSERT INTO ticket_response_log(operation_type, ticket_response_id, response, datetime, ticket_id, user_id)
        VALUES ('DELETE', OLD."TicketResponseId", OLD."Response", OLD."DateTime", OLD."TicketId", OLD."UserId");
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

